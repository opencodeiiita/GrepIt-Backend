generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Init {
  id Int @id @default(autoincrement())
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  password     String
  currPoints   Int       @default(0)
  userRoomId   Int?
  isCreator    Boolean   @default(false)
  userRoom     Room?     @relation("RoomToUsers", fields: [userRoomId], references: [roomId])
  pendingRooms Room[]    @relation("RoomToPendingUsers")
  messages     Message[] @relation("UserToMessages")
  results      Result[]  @relation("UserToResults")

  @@index([userRoomId], map: "userRoomId")
}

model Question {
  questionId Int      @id @default(autoincrement())
  question   String
  quizId     Int?
  options    Option[] @relation("QuestionToOptions")
  quiz       Quiz?    @relation("QuizToQuestions", fields: [quizId], references: [quizId])

  @@index([quizId], map: "quizId")
}

model Option {
  optionId   Int      @id @default(autoincrement())
  option     String
  questionId Int
  isCorrect  Boolean  @default(false)
  resultId   Int?
  question   Question @relation("QuestionToOptions", fields: [questionId], references: [questionId], onDelete: Cascade)
  result     Result?  @relation("ResultToOptions", fields: [resultId], references: [resultId])

  @@index([questionId], map: "questionId")
  @@index([resultId], map: "resultId")
}

model Room {
  roomId          Int       @id @default(autoincrement())
  roomName        String
  roomDescription String?
  code            String    @unique
  isInviteOnly    Boolean   @default(false)
  isClosed        Boolean   @default(false)
  pending         User[]    @relation("RoomToPendingUsers")
  users           User[]    @relation("RoomToUsers")
  messages        Message[] @relation("RoomToMessages")
  quizzes         Quiz[]    @relation("RoomToQuizzes")
}

model Message {
  messageId Int    @id @default(autoincrement())
  message   String
  userId    Int
  roomId    Int
  user      User   @relation("UserToMessages", fields: [userId], references: [id])
  room      Room   @relation("RoomToMessages", fields: [roomId], references: [roomId])

  @@index([userId], map: "id")
  @@index([roomId], map: "roomId")
}

model Quiz {
  quizId    Int        @id @default(autoincrement())
  roomId    Int
  questions Question[] @relation("QuizToQuestions")
  room      Room       @relation("RoomToQuizzes", fields: [roomId], references: [roomId])
  results   Result[]   @relation("ResultToQuiz")

  @@index([roomId], map: "roomId")
}

model Result {
  resultId      Int      @id @default(autoincrement())
  quizId        Int
  score         Int
  userId        Int
  quiz          Quiz     @relation("ResultToQuiz", fields: [quizId], references: [quizId])
  optionsMarked Option[] @relation("ResultToOptions")
  user          User     @relation("UserToResults", fields: [userId], references: [id])

  @@index([quizId], map: "quizId")
  @@index([userId], map: "userId")
}

model RoomToPendingUsers {
  A Int
  B Int

  @@unique([A, B], map: "_RoomToPendingUsers_AB_unique")
  @@index([B], map: "_RoomToPendingUsers_B_index")
  @@map("_RoomToPendingUsers")
}
